name: Create Windows VPS

on:
  workflow_dispatch:
    inputs:
      vps_name:
        description: 'VPS Name (e.g., TASTR-Study)'
        required: false
        default: 'TASTR-VPS'
        type: string

      backup:
        description: 'Restore from previous backup?'
        required: false
        default: false
        type: boolean
      timeout_minutes:
        description: 'VPS runtime (minutes, max 360 = 6 hours)'
        required: true
        default: 360
        type: number
      windows_password:
        description: 'Custom Windows password (8-14 characters, required)'
        required: true
        type: string
      ngrok_token:
        description: 'Ngrok token (required for stable connection)'
        required: true
        type: string

jobs:
  create-vps:
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(inputs.timeout_minutes || '360') }}
    
    steps:
    # Step 1: Validate inputs
    - name: Validate Inputs
      shell: powershell
      run: |
        Write-Host "=== Input Validation ===" -ForegroundColor Green
        
        $vpsName = "${{ inputs.vps_name || 'StudyVPS' }}"
        $timeout = [int]"${{ inputs.timeout_minutes || '360' }}"
        
        # Validate VPS name
        if ($vpsName -match '[^a-zA-Z0-9\-_]') {
          Write-Error "VPS name can only contain letters, numbers, hyphens and underscores"
          exit 1
        }
        
        # Validate timeout
        if ($timeout -lt 30 -or $timeout -gt 360) {
          Write-Error "Runtime must be 30-360 minutes (max 6 hours)"
          exit 1
        }
        
        # Validate password (now required)
        $customPassword = "${{ inputs.windows_password }}"
        if (-not $customPassword -or $customPassword.Length -lt 8) {
          Write-Error "Password is required and must be at least 8 characters"
          exit 1
        }
        if ($customPassword.Length -gt 14) {
          Write-Error "Password must be 14 characters or less for Windows compatibility"
          exit 1
        }
        
        # Validate ngrok token (now required)
        $ngrokToken = "${{ inputs.ngrok_token }}"
        if (-not $ngrokToken -or $ngrokToken.Length -lt 10) {
          Write-Error "Ngrok token is required and must be valid"
          exit 1
        }
        
        Write-Host "OK - All inputs valid" -ForegroundColor Green
        Write-Host "VPS Name: $vpsName" -ForegroundColor Cyan
        Write-Host "Runner: GitHub Windows (16GB RAM, 200GB SSD, 4 cores)" -ForegroundColor Cyan
        Write-Host "Timeout: $timeout minutes" -ForegroundColor Cyan
        Write-Host "Backup: ${{ inputs.backup }}" -ForegroundColor Cyan

    # Step 2: Checkout and prepare
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Prepare Directories
      shell: powershell
      run: |
        Write-Host "=== Prepare Directories ===" -ForegroundColor Green
        
        # Create necessary directories
        $dirs = @("TASTRVPS", "logs", "templates", "TASTRVPS\scripts")
        foreach ($dir in $dirs) {
          if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force
            Write-Host "OK - Created directory: $dir" -ForegroundColor Green
          }
        }
        
        # Set environment variables
        "VPS_NAME=${{ inputs.vps_name || 'TASTR-VPS' }}" >> $env:GITHUB_ENV
        "BACKUP_ENABLED=${{ inputs.backup }}" >> $env:GITHUB_ENV
        "TIMEOUT_MINUTES=${{ inputs.timeout_minutes || '360' }}" >> $env:GITHUB_ENV
        "WINDOWS_PASSWORD=${{ inputs.windows_password }}" >> $env:GITHUB_ENV
        "NGROK_TOKEN=${{ inputs.ngrok_token }}" >> $env:GITHUB_ENV

    # Step 2.5: Display System Information
    - name: Display System Information
      shell: powershell
      run: |
        Write-Host "=== System Information ===" -ForegroundColor Green
        
        # Get system info
        $computerInfo = Get-ComputerInfo
        $cpu = Get-WmiObject -Class Win32_Processor | Select-Object -First 1
        $memory = Get-WmiObject -Class Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
        $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object Size, FreeSpace
        
        # Display info
        Write-Host "Computer: $($computerInfo.CsName)" -ForegroundColor Cyan
        Write-Host "OS: $($computerInfo.WindowsProductName)" -ForegroundColor Cyan
        Write-Host "CPU: $($cpu.Name)" -ForegroundColor Cyan
        Write-Host "CPU Cores: $($cpu.NumberOfCores)" -ForegroundColor Cyan
        Write-Host "RAM Total: $([math]::Round($memory.Sum / 1GB, 2)) GB" -ForegroundColor Cyan
        Write-Host "Disk Total: $([math]::Round($disk.Size / 1GB, 2)) GB" -ForegroundColor Cyan
        Write-Host "Disk Free: $([math]::Round($disk.FreeSpace / 1GB, 2)) GB" -ForegroundColor Cyan
        
        # Check GPU
        try {
          $gpu = Get-WmiObject -Class Win32_VideoController | Where-Object { $_.Name -notlike "*Basic*" -and $_.Name -notlike "*Generic*" } | Select-Object -First 1
          if ($gpu) {
            Write-Host "GPU: $($gpu.Name)" -ForegroundColor Cyan
            if ($gpu.AdapterRAM -gt 0) {
              Write-Host "VRAM: $([math]::Round($gpu.AdapterRAM / 1GB, 2)) GB" -ForegroundColor Cyan
            }
          } else {
            Write-Host "GPU: Not detected" -ForegroundColor Yellow
          }
        } catch {
          Write-Host "GPU: Detection failed" -ForegroundColor Yellow
        }
        
        # Runner info
        Write-Host "Runner: GitHub Windows (Free)" -ForegroundColor Blue
        Write-Host "Time Limit: ${{ inputs.timeout_minutes }} minutes" -ForegroundColor Blue

    # Step 3: Restore backup (optional)
    - name: Restore Backup (Optional)
      if: inputs.backup == true
      shell: powershell
      run: |
        Write-Host "=== Restore Backup ===" -ForegroundColor Green
        
        if (Test-Path "TASTRVPS\backupre-store.sh") {
          Write-Host "Running backup restore script..." -ForegroundColor Yellow
          bash TASTRVPS\backupre-store.sh restore
        } else {
          Write-Host "Backup script not found, skipping this step" -ForegroundColor Yellow
        }

    # Step 4: Load configuration
    - name: Load Configuration
      shell: powershell
      run: |
        Write-Host "=== Load Configuration ===" -ForegroundColor Green
        
        # Install PowerShell-Yaml if not exists
        if (!(Get-Module -ListAvailable -Name powershell-yaml)) {
          Write-Host "Installing PowerShell-Yaml..." -ForegroundColor Yellow
          Install-Module -Name powershell-yaml -Force -Scope CurrentUser
        }
        
        # Load config if exists
        if (Test-Path "TASTRVPS\config.yml") {
          Write-Host "Loading configuration from config.yml..." -ForegroundColor Cyan
          $config = Get-Content "TASTRVPS\config.yml" | ConvertFrom-Yaml
          
          # Set environment variables from config
          # Always use TASTR as the username
          "WINDOWS_USER=TASTR" >> $env:GITHUB_ENV
          
          if ($config.tmate_server) {
            "TMATE_SERVER=$($config.tmate_server)" >> $env:GITHUB_ENV
          } else {
            "TMATE_SERVER=nyc1.tmate.io" >> $env:GITHUB_ENV
          }
        } else {
          Write-Host "config.yml not found, using default configuration" -ForegroundColor Yellow
          "WINDOWS_USER=TASTR" >> $env:GITHUB_ENV
          "TMATE_SERVER=nyc1.tmate.io" >> $env:GITHUB_ENV
        }

    # Step 5: Setup Windows RDP
    - name: Setup Windows RDP
      shell: powershell
      run: |
        Write-Host "=== Setup Windows RDP ===" -ForegroundColor Green
        
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1
        
        # Use provided password
        $password = $env:WINDOWS_PASSWORD
        Write-Host "Using provided password" -ForegroundColor Cyan
        
        # Hide runneradmin user
        Write-Host "Hiding runneradmin user..." -ForegroundColor Yellow
        try { net user runneradmin /active:no 2>$null } catch { Write-Host "User runneradmin does not exist or already hidden" -ForegroundColor Gray }
        
        # Create TASTR user with full privileges
        $username = "TASTR"
        Write-Host "Creating TASTR user with full privileges..." -ForegroundColor Cyan
        
                 # Create new user TASTR
         net user $username $password /add /y
         net localgroup administrators $username /add
         net localgroup "Remote Desktop Users" $username /add
        
        # Give additional privileges
        try { net localgroup "Power Users" $username /add 2>$null } catch { Write-Host "Power Users group does not exist" -ForegroundColor Gray }
        try { net localgroup "Users" $username /add 2>$null } catch { Write-Host "Users group already has user" -ForegroundColor Gray }
        
        Write-Host "RDP configured successfully" -ForegroundColor Green
        Write-Host "Username: $username" -ForegroundColor Cyan
        Write-Host "Password: [HIDDEN]" -ForegroundColor Cyan
        
        # Save credentials to environment
        "RDP_USERNAME=$username" >> $env:GITHUB_ENV
        "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

    # Step 6: Setup Ngrok tunnel
    - name: Setup Remote Access Tunnel
      shell: powershell
      run: |
        Write-Host "=== Setup Remote Access ===" -ForegroundColor Green
        
        # Use ngrok token from input (now required)
        $ngrokToken = $env:NGROK_TOKEN
        
        Write-Host "Setting up Ngrok tunnel..." -ForegroundColor Cyan
        
        # Download and install Ngrok
        Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
        Expand-Archive -Path "ngrok.zip" -DestinationPath "." -Force
        
        # Configure Ngrok
        .\ngrok.exe config add-authtoken $ngrokToken
        
        # Start Ngrok tunnel for RDP
        Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp", "3389", "--log=stdout" -NoNewWindow -PassThru
        
        Start-Sleep -Seconds 10
        
        # Get tunnel information
        try {
          $tunnelInfo = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
          $publicUrl = $tunnelInfo.tunnels[0].public_url
          Write-Host "Ngrok URL: $publicUrl" -ForegroundColor Green
          "TUNNEL_URL=$publicUrl" >> $env:GITHUB_ENV
          "TUNNEL_TYPE=ngrok" >> $env:GITHUB_ENV
        } catch {
          Write-Host "Cannot get Ngrok tunnel information" -ForegroundColor Yellow
          Write-Host "Please check Ngrok dashboard for connection URL" -ForegroundColor Cyan
        }

    # Step 7: Create backup
    - name: Create Backup
      shell: powershell
      run: |
        Write-Host "=== Create Backup ===" -ForegroundColor Green
        
        if (Test-Path "TASTRVPS\backupre-store.sh") {
          Write-Host "Running backup script..." -ForegroundColor Yellow
          bash TASTRVPS\backupre-store.sh backup
        } else {
          Write-Host "Backup script not found" -ForegroundColor Yellow
          
          # Simple backup
          $backupDir = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          New-Item -ItemType Directory -Path $backupDir -Force
          
          # Backup important files
          if (Test-Path "TASTRVPS") { Copy-Item -Path "TASTRVPS" -Destination "$backupDir\" -Recurse -Force }
          if (Test-Path "logs") { Copy-Item -Path "logs" -Destination "$backupDir\" -Recurse -Force }
          
          Write-Host "Basic backup completed: $backupDir" -ForegroundColor Green
        }

    # Step 8: Auto-commit updates
    - name: Auto-commit Updates
      shell: powershell
      run: |
        Write-Host "=== Update Repository ===" -ForegroundColor Green
        
        git config --global user.name "VPS Auto Update"
        git config --global user.email "vps@github.actions"
        
        # Add changes
        git add -A
        
        # Check if there are changes to commit
        $changes = git status --porcelain
        if ($changes) {
          $commitMessage = "Auto-update VPS session $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          git commit -m $commitMessage
          
          # Try to push (may fail if no permissions)
          try {
            git push
            Write-Host "Repository updated successfully" -ForegroundColor Green
          } catch {
            Write-Host "Cannot push changes (may be due to permissions)" -ForegroundColor Yellow
          }
        } else {
          Write-Host "No changes to commit" -ForegroundColor Cyan
        }

    # Step 9: Keep-alive monitoring with health checks
    - name: Keep-alive Monitoring
      shell: powershell
      run: |
        Write-Host "=== Start Keep-alive Monitoring ===" -ForegroundColor Green
        
        $timeout = [int]$env:TIMEOUT_MINUTES
        $endTime = (Get-Date).AddMinutes($timeout)
        $checkInterval = 60 # Check every minute
        
        Write-Host "VPS will run until: $($endTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Cyan
        Write-Host "Connection Information:" -ForegroundColor Green
        Write-Host "   Username: $env:RDP_USERNAME" -ForegroundColor Yellow
        Write-Host "   Password: $env:RDP_PASSWORD" -ForegroundColor Yellow
        Write-Host "   Tunnel Type: $env:TUNNEL_TYPE" -ForegroundColor Yellow
        if ($env:TUNNEL_URL) {
          Write-Host "   Tunnel URL: $env:TUNNEL_URL" -ForegroundColor Yellow
        }
        
        Write-Host "`nVPS is ready to use!" -ForegroundColor Green
        Write-Host "Use the information above to connect via RDP and start learning!" -ForegroundColor Cyan
        Write-Host "Time remaining: $timeout minutes" -ForegroundColor Yellow
        Write-Host "VPS Specs: 16GB RAM, 200GB+ Storage, 4 cores" -ForegroundColor Cyan
        
        while ((Get-Date) -lt $endTime) {
          $remaining = [math]::Round(($endTime - (Get-Date)).TotalMinutes, 1)
          
          # Health checks
          $rdpStatus = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
          $memoryUsage = [math]::Round((Get-WmiObject -Class Win32_OperatingSystem).TotalVisibleMemorySize / 1MB, 2)
          $freeSpace = [math]::Round((Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'").FreeSpace / 1GB, 2)
          
          Write-Host "Health Check - Remaining: $remaining min | RDP: $($rdpStatus.Status) | RAM: $memoryUsage GB | Disk: $freeSpace GB free" -ForegroundColor Cyan
          
          # Log to file
          $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Remaining: $remaining min, RDP: $($rdpStatus.Status), RAM: $memoryUsage GB, Disk: $freeSpace GB"
          Add-Content -Path "logs\vps-monitoring.log" -Value $logEntry
          
          Start-Sleep -Seconds $checkInterval
        }
        
        Write-Host "VPS runtime has ended!" -ForegroundColor Yellow
        Write-Host "Thank you for using TASTR Windows VPS!" -ForegroundColor Green
        Write-Host "You can run the workflow again to create a new VPS" -ForegroundColor Cyan
